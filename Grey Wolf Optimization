import numpy as np
import random
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Define GWO function
def GWO(objf, lb, ub, dim, SearchAgents_no, Max_iter):
    # Initialize alpha, beta, and delta positions and scores
    Alpha_pos = np.zeros(dim)
    Alpha_score = float("inf")
    
    Beta_pos = np.zeros(dim)
    Beta_score = float("inf")
    
    Delta_pos = np.zeros(dim)
    Delta_score = float("inf")

    # Initialize positions of search agents
    Positions = np.random.uniform(0, 1, (SearchAgents_no, dim)) * (np.array(ub) - np.array(lb)) + np.array(lb)
    
    Convergence_curve = np.zeros(Max_iter)

    print("GWO is optimizing \"" + objf.__name__ + "\"")    

    # Main loop
    for l in range(Max_iter):
        for i in range(SearchAgents_no):
            # Return the search agents that go beyond the boundaries of the search space
            for j in range(dim):
                Positions[i, j] = round(np.clip(Positions[i, j], lb[j], ub[j]), 2)
            print(Positions)
            # Calculate objective function for each search agent
            fitness = objf(Positions[i, :])
            print(fitness)
            # Update Alpha, Beta, and Delta
            if fitness < Alpha_score:
                Alpha_score = fitness
                Alpha_pos = Positions[i, :].copy()
            
            if fitness > Alpha_score and fitness < Beta_score:
                Beta_score = fitness
                Beta_pos = Positions[i, :].copy()
            
            if fitness > Alpha_score and fitness > Beta_score and fitness < Delta_score: 
                Delta_score = fitness
                Delta_pos = Positions[i, :].copy()
        
        a = 2 - l * ((2) / Max_iter)

        # Update the position of search agents including omegas
        for i in range(SearchAgents_no):
            for j in range(dim):     
                r1 = random.random()
                r2 = random.random()
               
                A1 = 2 * a * r1 - a
                C1 = 2 * r2
                
                D_alpha = abs(C1 * Alpha_pos[j] - Positions[i, j])
                X1 = Alpha_pos[j] - A1 * D_alpha
                           
                r1 = random.random()
                r2 = random.random()
                
                A2 = 2 * a * r1 - a
                C2 = 2 * r2
                
                D_beta = abs(C2 * Beta_pos[j] - Positions[i, j])
                X2 = Beta_pos[j] - A2 * D_beta       
                
                r1 = random.random()
                r2 = random.random() 
                
                A3 = 2 * a * r1 - a
                C3 = 2 * r2
                
                D_delta = abs(C3 * Delta_pos[j] - Positions[i, j])
                X3 = Delta_pos[j] - A3 * D_delta    

                # Round positions to two decimal places
                X1 = round(X1, 2)
                X2 = round(X2, 2)
                X3 = round(X3, 2)
                
                print(X1 , X2 , X3 )
                Positions[i, j] = (X1 + X2 + X3) / 3
        
        Convergence_curve[l] = Alpha_score
    
    print("Alpha position =", Alpha_pos)
    print("Beta position =", Beta_pos)
    print("Delta position =", Delta_pos)

    return Alpha_pos, Alpha_score
